name: build-and-test

on:
  workflow_dispatch:
  push:
    branches: ["development", "feature/*"]

env:
  REGISTRY: docker.io
  IMAGE_NAME: imotechsl/kenecare-api
  IMAGE_TAG: prod-1.0.${{github.run_number}}
  GH_RUN_NUMBER: ${{github.run_number}}
  DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}

jobs:
  run-tests:
    runs-on: ["self-hosted", "imotechsl-apps"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Run Unit Test
        run: npm test

  build-and-push-image:
    needs: run-tests
    runs-on: ["self-hosted", "imotechsl-apps"]

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2.1.0

      - name: Install Cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: "v2.2.4"

      - name: Check if Cosign is installed
        if: github.event_name != 'pull_request'
        run: cosign version

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2.1.0 

      - name: Login to Registry ${{env.REGISTRY}}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{env.REGISTRY}}
          username: ${{env.DOCKER_USERNAME}}
          password: ${{env.DOCKER_PASSWORD}}

      - name: Extract Docker Metadata
        id: docker-metadata
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}
          tags: type=sha, format=long

      - name: Build and Push Docker Image
        id: build-and-push
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          file: Dockerfile.prod
          push: ${{github.event_name != 'pull_request'}}
          tags: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
          labels: ${{steps.docker-metadata.outputs.labels}}

      # - name: Save Docker Image Digest
      #   id: digest
      #   run: |
      #     DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{env.REGISTRY}}/imotechsl/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} | cut -d'@' -f2)
      #     echo "DIGEST=$DIGEST" >> GITHUB_ENV

      - name: Sign Docker Image
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
        env:
          TAGS: ${{steps.docker-metadata.outputs.tags}}
          COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
          DIGEST: ${{steps.build-and-push.outputs.digest}}

      # - name: Verify Signature Before Push
      #   run: |
      #     echo "Digest: ${{ steps.build-and-push.outputs.digest }}" 
      #     cosign verify --key env://COSIGN_PUBLIC_KEY \
      #      ${{env.REGISTRY}}/${{env.IMAGE_NAME}}@${steps.build-and-push.outputs.digest}
      #   env:
      #     COSIGN_PUBLIC_KEY: ${{secrets.COSIGN_PUBLIC_KEY}}

      - name: Copy Variables
        run: cp ~/.env.kenecare.api-prod ./.env.production

  # deploy-to-prod:
  #   needs: build-and-push-image
  #   runs-on: ["self-hosted", "imotechsl-apps"]
  #   permissions:
  #     contents: read
  #     packages: write
  #     id-token: write
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Set Old Image Tag
  #       run: |
  #         echo "OLD_IMAGE_TAG=1.0.$(($GITHUB_RUN_NUMBER-1))" >> $GITHUB_ENV

  #     - name: Verify Docker Image Signature
  #       run: |
  #         cosign verify --key env://COSIGN_PUBLIC_KEY \
  #           ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
  #       env:
  #         COSIGN_PUBLIC_KEY: ${{secrets.COSIGN_PUBLIC_KEY}}

  #     - name: Remove Old Container
  #       run: docker rm -f kenecare-api-production-${OLD_IMAGE_TAG} || true

  #     - name: Remove Cached Images
  #       run: docker rmi imotechsl/kenecare-api-prod:${OLD_IMAGE_TAG} || true

  #     - name: Copy Variables
  #       run: cp ~/.env.kenecare.api-prod ./.env.production

  #     - name: Run Compose
  #       run: make run-prod TAG=${IMAGE_TAG}

  #     - name: Run Health Check
  #       run: |
  #         echo "Waiting for service to become healthy...."
  #         for i in {1..10}; do
  #           curl -f http://localhost:8500/health-check || sleep 5
  #         done
  #         echo "Service is up and running"

  #     - name: Rollback deployment (if health check fails)
  #       if: failure()
  #       run: make rollback-prod

  #     - name: Clean up Dangling Images
  #       run: docker image prune -f

  #     - name: Notify Deployment Success
  #       run: echo "Deployment completed successfully"
