name: test-build-push-and-deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - release/*
  #   paths:
  #     - 'src/**'
  #     - 'Dockerfile.prod'
  #     - '.github/workflows/build-and-test.yml'
  # pull_request:

env:
  REGISTRY: docker.io
  IMAGE_NAME: imotechsl/kenecare-api
  IMAGE_TAG: prod-1.0.${{github.run_number}}
  GH_RUN_NUMBER: ${{github.run_number}}
  DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  SHA: ${{ github.event.after}}

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Run Unit Test
        run: npm test

  build-and-scan-image:
    needs: run-tests
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.SHA }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2.5.0
        with:
          driver-opts: |
            image=moby/buildkit:v0.10.6

      - name: Install Cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: "v2.2.4"

      - name: Check if Cosign is installed
        if: github.event_name != 'pull_request'
        run: cosign version

      - name: Login to Registry ${{env.REGISTRY}}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{env.REGISTRY}}
          username: ${{env.DOCKER_USERNAME}}
          password: ${{env.DOCKER_PASSWORD}}

      - name: Extract Docker Metadata
        id: docker-metadata
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}
          labels: |
            org.opencontainers.image.revision=${{ env.SHA }}
          tags: |
            type=edge,branch=$repo.default_branch
            type=semver,pattern=v{{version}}
            type=sha,prefix=,suffix=, format=short

      - name: Build and Push Docker Image
        id: build-and-push
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          file: Dockerfile.prod
          push: ${{github.event_name != 'pull_request'}}
          tags: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
          labels: ${{steps.docker-metadata.outputs.labels}}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

      - name: Scan Docker Image with Docker Scout
        id: docker-scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
          output: table
          ignore-unchanged: true
          only-severities: critical,high
          only-fixed: true

      # - name: Fail if fixable high/critical vulnerabilities exist
      #   run: |
      #     docker scout cves ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} --format sarif > scout.sarif

      #     if grep -q '"severity":"CRITICAL"\|"severity":"HIGH"' scout.serif; then
      #        echo "❌ Fixable high/critical vulnerabilities found. Please Fix Before Proceeding!"
      #        exit 1
      #     fi

      - name: Sign Docker Image
        if: github.event_name != 'pull_request'
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
        env:
          TAGS: ${{steps.docker-metadata.outputs.tags}}
          COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
          DIGEST: ${{steps.build-and-push.outputs.digest}}

      # - name: Copy Variables
      #   run: cp ~/.env.kenecare.api-prod ./.env.production

  deploy-to-prod:
    needs: build-and-scan-image
    runs-on: ["self-hosted", "imotechsl-apps"]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Old Image Tag
        run: |
          echo "OLD_IMAGE_TAG=1.0.$(($GITHUB_RUN_NUMBER-1))" >> $GITHUB_ENV

      - name: Remove Old Container
        run: docker rm -f kenecare-api-production-${OLD_IMAGE_TAG} || true

      - name: Remove Cached Images
        run: docker rmi imotechsl/kenecare-api-prod:${OLD_IMAGE_TAG} || true

      - name: Copy Variables
        run: cp ~/.env.kenecare.api-prod ./.env.production

      - name: Run Compose
        run: ENV=production make deploy-prod TAG=${IMAGE_TAG}

      - name: Clean up Dangling Images
        run: docker image prune -f || true

      - name: Save Last Deployment Info to File
        run: |
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "SHA=${SHA}" >> $GITHUB_ENV
          echo "${IMAGE_NAME}:${IMAGE_TAG}" > /home/ubuntu/.last_deplyed_image

      - name: Notify Deployment Success on Slack
        if: ${{ success() && github.event_name != 'pull_request' }}
        uses: slackapi/slack-github-action@v1.22.0
        with:
          payload: |
            {
              "text": "🚀 *Deployment Successful*",
              "attachments": [
                {
                  "color": "#36a64f",
                  "fields": [
                    {
                      "title": "Image",
                      "value": "${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}",
                      "short": true
                    },
                    {
                      "title": "Run",
                      "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Run #${{ env.GH_RUN_NUMBER }}>",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "<https://github.com/${{ github.repository }}/commit/${{ env.SHA }}|${{ env.SHA }}>",
                      "short": true
                    },
                    {
                      "title": "Message",
                      "value": "${{ github.event.head_commit.message }}",
                      "short": false
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
